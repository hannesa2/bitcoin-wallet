import fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask

apply plugin: 'com.android.application'
apply plugin: 'androidsvgdrawable'

dependencies {
    compile(project(':integration-android')) {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile "com.android.support:support-annotations:$supportLib"
    compile "com.android.support:support-compat:$supportLib"
    compile("com.android.support:support-v13:$supportLib") {
        exclude(group: 'com.android.support', module: 'support-fragment')
        exclude(group: 'com.android.support', module: 'support-media-compat')
    }
    compile "com.android.support:support-core-utils:$supportLib"
    compile "com.android.support:recyclerview-v7:$supportLib"
    compile "com.android.support:cardview-v7:$supportLib"
    compile 'org.bitcoinj:bitcoinj-core:0.14.5'
    compile 'com.google.protobuf:protobuf-java:3.1.0'
    compile 'com.google.guava:guava:20.0'
    compile 'com.google.zxing:core:3.3.1'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    compile 'com.squareup.moshi:moshi:1.5.0'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile('com.github.tony19:logback-android-classic:1.1.1-6') {
        exclude(group: 'com.google.android', module: 'android')
    }
    compile 'com.github.tony19:logback-android-core:1.1.1-6'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    testCompile 'junit:junit:4.12'
}

def versionNr = '5'

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getLatestGitHash() {
    def process = "git rev-parse --short HEAD".execute()
    return process.text.toString().trim()
}

static def getLongGitHash() {
    def process = "git rev-parse HEAD".execute()
    return process.text.toString().trim()
}

def getGitRepoUrl() {
    def process = "git remote get-url origin --push".execute()
    return process.text.toString().replace(".git", "").trim()
}

static def getGitCommitUrl() {
    return getGitRepoUrl() + "/commit/" + getLongGitHash()
}

android {
    compileSdkVersion defaultCompiledkVersion
    buildToolsVersion defaultBuildToolsVersion

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    defaultConfig {
        generatedDensities = ['hdpi', 'xhdpi']
        versionCode getGitCommitCount()
        versionName versionNr + "." + versionCode + "-" + getLatestGitHash()
        minSdkVersion defaultMinSdkVersion
        targetSdkVersion defaultTargetSdkVersion
        applicationId "info.wallet.trust"
        multiDexEnabled true
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        buildConfigField "String", "GIT_COMMIT_URL", "\"" + getGitCommitUrl() + "\""
        buildConfigField "String", "GIT_REPO_URL", "\"" + getGitRepoUrl() + "\""
        buildConfigField "String", "GIT_TAG_URL", "\"" + getGitRepoUrl()+"/tags" + "\""
    }

    signingConfigs {
        if (System.getenv("CI_SERVER")) {
            release {
                println "KEYSTORE_FILE=" + System.getenv('KEYSTORE_FILE')
                storeFile rootProject.file(System.getenv('KEYSTORE_FILE'))
                storePassword System.getenv("KEYSTORE_PASS")
                keyAlias System.getenv("ALIAS_NAME")
                keyPassword System.getenv("ALIAS_PASS")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFile 'proguard.cfg'
            if (System.getenv("CI_SERVER")) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        test {
            java.srcDirs = ['test']
            resources.srcDirs = ['test']
        }
    }

    packagingOptions {
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints.txt'
        exclude 'org.bitcoin.test.checkpoints.txt'
    }
}

play {
    if (System.getenv("CI_SERVER")) {
        track = 'alpha'
        serviceAccountEmail = System.getenv('PLAY_SERVICE_MAIL')
        pk12File = rootProject.file(System.getenv('PLAY_P12_FILE'))
    }
}

task svgToPngMipmap(type: SvgDrawableTask) {
    from = files('graphics/mipmap')
    to = file('res')
    targetedDensities = ['hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    outputFormat = 'PNG'
    outputType = 'mipmap'
}
